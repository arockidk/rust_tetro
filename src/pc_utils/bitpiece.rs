
use std::ops::Sub;



use crate::{piece::{Direction, PieceColor, TetPiece}, vec2::Vec2};
pub const KICKS: [[i8; 5] ; 4] = [
    [  0; 5],
    [  0,  1,- 9, 20, 21],
    [  0; 5],
    [  0,- 1,-11, 20, 19],
];
pub const I_KICKS: [[i8; 5] ; 4] = [
    [  0,- 1,  2,- 1,  2],
    [- 1,  0,  0, 10,-20],
    [  9, 11,  8,  1,- 2],
    [ 10, 10, 10,-10, 20],
];
pub const KICKS_180: [[i8; 2]; 4] = [
    [  0,  10],
    [  0,   1],
    [  0; 2],
    [  0; 2],
];
pub const I_KICKS_180: [[i8; 2]; 4] = [
    [- 9,  1],
    [-11,-10],
    [  0; 2],
    [  0; 2],
];
macro_rules! gen_cw {
    ($src: expr, $idx: expr) => {
        KICKS[$src][$idx] - KICKS[($src + 1) % 4][$idx]
    };
}
macro_rules! gen_ccw {
    ($src: expr, $idx: expr) => {
        KICKS[$src][$idx] - KICKS[($src + 3) % 4][$idx]
    };
}
macro_rules! gen_180 {
    ($src: expr, $idx: expr) => {
        KICKS_180[$src][$idx] - KICKS_180[($src + 2) % 4][$idx]
    };
}
macro_rules! gen_i_cw {
    ($src: expr, $idx: expr) => {
        I_KICKS[$src][$idx] - I_KICKS[($src + 1) % 4][$idx]
    };
}
macro_rules! gen_i_ccw {
    ($src: expr, $idx: expr) => {
        I_KICKS[$src][$idx] - I_KICKS[($src + 3) % 4][$idx]
    };
}
macro_rules! gen_i_180 {
    ($src: expr, $idx: expr) => {
        I_KICKS_180[$src][$idx] - I_KICKS_180[($src + 2) % 4][$idx]
    };
}
// bits 1-2: rotation
// bits 3-8: position
// bits 9-12: color
// sob 4 bits wasted
#[derive(Clone, Copy)]
/**
 * position, rotation, color
 */
pub struct BitPiece(pub usize, pub usize, pub usize);

pub struct Pos(pub u8);
// assume big endian
// each i8 represents the offset of the mino with respect to a base position
// u16 describes the bounds on the position of the piece given a rotation
// minY, maxY, minX, maxX
// 2     2     4     4



pub const POSITION_BOUNDS: [[(u16); 4]; 8] = [
    // filler
    [
        (0) ; 4
    ],
    // I
    [        
        (0b0000_00_11_0001_0111),
        (0b0000_10_10_0000_1001),
        (0b0000_00_11_0010_1000),
        (0b0000_01_01_0000_1001),
    ],
    // L 
    [
        (0b0000_00_10_0001_1000),
        (0b0000_01_10_0000_1000),
        (0b0000_01_11_0001_1000),
        (0b0000_01_10_0001_1001),
    ],
    // O
    [
        (0b0000_00_10_0000_1000); 4
    ],
    // Z
    [
        (0b0000_00_10_0001_1000),
        (0b0000_01_10_0000_1000), 
        (0b0000_01_11_0001_1000),
        (0b0000_01_10_0001_1001),
    ],
    // T
    [
        (0b0000_00_10_0001_1000),
        (0b0000_01_10_0000_1000),
        (0b0000_01_11_0001_1000),
        (0b0000_01_10_0001_1001),
    ],
    // J
    [ 
        (0b0000_00_10_0001_1000),
        (0b0000_01_10_0000_1000),
        (0b0000_01_11_0001_1000),
        (0b0000_01_10_0001_1001),
    ],
    // S
    [
        (0b0000_00_10_0001_1000),
        (0b0000_01_10_0000_1000), 
        (0b0000_01_11_0001_1000),
        (0b0000_01_10_0001_1001),
    ]
];

// O
// 0b0000000000000000000000000000000000011111111101111111110111111111
// 0b0000000000000000000000000000000000011111111101111111110111111111
// 0b0000000000000000000000000000000000011111111101111111110111111111
// 0b0000000000000000000000000000000000011111111101111111110111111111
// Z
// 0b0000000000000000000000000000000000011111111001111111100111111110
// 0b0000000000000000000000000000000000011111111101111111110000000000
// 0b0000000000000000000000000111111110011111111001111111100000000000
// 0b0000000000000000000000000000000000111111111011111111100000000000
// T
// 0b0000000000000000000000000000000000011111111001111111100111111110
// 0b0000000000000000000000000000000000011111111101111111110000000000
// 0b0000000000000000000000000111111110011111111001111111100000000000
// 0b0000000000000000000000000000000000111111111011111111100000000000
// J
// 0b0000000000000000000000000000000000011111111001111111100111111110
// 0b0000000000000000000000000000000000011111111101111111110000000000
// 0b0000000000000000000000000111111110011111111001111111100000000000
// 0b0000000000000000000000000000000000111111111011111111100000000000
// S
// 0b0000000000000000000000000000000000011111111001111111100111111110
// 0b0000000000000000000000000000000000011111111101111111110000000000
// 0b0000000000000000000000000111111110011111111001111111100000000000
// 0b0000000000000000000000000000000000111111111011111111100000000000
// I
// 0b0000000000000000000000000011111110001111111000111111100011111110
// 0b0000000000000000000000000000000000111111111100000000000000000000
// 0b0000000000000000000000000111111100011111110001111111000111111100
// 0b0000000000000000000000000000000000000000000011111111110000000000
pub const BOUND_MAPS: [[(u64, u64); 4]; 8] = [
    // filler
    [ (0,0) ; 4 ],
    //  I
    [
        (
            0b0000000000000000000000000011111110001111111000111111100011111110,
            0b0000001111111000111111100011111110001111111000111111100011111110
        ),
        (
            0b0000000000000000000000000000000000111111111100000000000000000000,
            0b0000111111111111111111111111111111111111111100000000000000000000
        ),
        (
            0b0000000000000000000000000111111100011111110001111111000111111100,
            0b0000011111110001111111000111111100011111110001111111000111111100
        ),
        (
            0b0000000000000000000000000000000000000000000011111111110000000000,
            0b0000111111111111111111111111111111111111111111111111110000000000
        ),
    ],
    //  L
    [
        (
            0b0000000000000000000000000000000000011111111001111111100111111110,
            0b0000011111111001111111100111111110011111111001111111100111111110
        ),
        (
            0b0000000000000000000000000000000000011111111101111111110000000000,
            0b0000011111111101111111110111111111011111111101111111110000000000
        ),
        (
            0b0000000000000000000000000111111110011111111001111111100000000000,
            0b0000011111111001111111100111111110011111111001111111100000000000
        ),
        (
            0b0000000000000000000000000000000000111111111011111111100000000000,
            0b0000111111111011111111101111111110111111111011111111100000000000
        ),
    ],
    //  O
    [
        (
            0b0000000000000000000000000000000000011111111101111111110111111111,
            0b0000011111111101111111110111111111011111111101111111110111111111
        ),
        (
            0b0000000000000000000000000000000000011111111101111111110111111111,
            0b0000011111111101111111110111111111011111111101111111110111111111
        ),
        (
            0b0000000000000000000000000000000000011111111101111111110111111111,
            0b0000011111111101111111110111111111011111111101111111110111111111
        ),
        (
            0b0000000000000000000000000000000000011111111101111111110111111111,
            0b0000011111111101111111110111111111011111111101111111110111111111
        ),
    ],
    //  Z
    [
        (
            0b0000000000000000000000000000000000011111111001111111100111111110,
            0b0000011111111001111111100111111110011111111001111111100111111110
        ),
        (
            0b0000000000000000000000000000000000011111111101111111110000000000,
            0b0000011111111101111111110111111111011111111101111111110000000000
        ),
        (
            0b0000000000000000000000000111111110011111111001111111100000000000,
            0b0000011111111001111111100111111110011111111001111111100000000000
        ),
        (
            0b0000000000000000000000000000000000111111111011111111100000000000,
            0b0000111111111011111111101111111110111111111011111111100000000000
        ),
    ],
    //  T
    [
        (
            0b0000000000000000000000000000000000011111111001111111100111111110,
            0b0000011111111001111111100111111110011111111001111111100111111110
        ),
        (
            0b0000000000000000000000000000000000011111111101111111110000000000,
            0b0000011111111101111111110111111111011111111101111111110000000000
        ),
        (
            0b0000000000000000000000000111111110011111111001111111100000000000,
            0b0000011111111001111111100111111110011111111001111111100000000000
        ),
        (
            0b0000000000000000000000000000000000111111111011111111100000000000,
            0b0000111111111011111111101111111110111111111011111111100000000000
        ),
    ],
    //  J
    [
        (
            0b0000000000000000000000000000000000011111111001111111100111111110,
            0b0000011111111001111111100111111110011111111001111111100111111110
        ),
        (
            0b0000000000000000000000000000000000011111111101111111110000000000,
            0b0000011111111101111111110111111111011111111101111111110000000000
        ),
        (
            0b0000000000000000000000000111111110011111111001111111100000000000,
            0b0000011111111001111111100111111110011111111001111111100000000000
        ),
        (
            0b0000000000000000000000000000000000111111111011111111100000000000,
            0b0000111111111011111111101111111110111111111011111111100000000000
        ),
    ],
    //  S
    [
        (
            0b0000000000000000000000000000000000011111111001111111100111111110,
            0b0000011111111001111111100111111110011111111001111111100111111110
        ),
        (
            0b0000000000000000000000000000000000011111111101111111110000000000,
            0b0000011111111101111111110111111111011111111101111111110000000000
        ),
        (
            0b0000000000000000000000000111111110011111111001111111100000000000,
            0b0000011111111001111111100111111110011111111001111111100000000000
        ),
        (
            0b0000000000000000000000000000000000111111111011111111100000000000,
            0b0000111111111011111111101111111110111111111011111111100000000000
        ),
    ],
];

pub const MINOS: [[u64; 4]; 8] = [
    // filler
    [
        0 ; 4
    ],
    // I
    [
        0b1000000000000000000000000000000000000000000000000000000000000111,
        0b0000000001000000000100000000000000000000000000000000010000000001,
        0b1100000000000000000000000000000000000000000000000000000000000011,
        0b0000000001000000000000000000000000000000000100000000010000000001
    ],
    [
        0b1000000000000000000000000000000000000000000000000000100000000011,
        0b0000000001100000000000000000000000000000000000000000010000000001,
        0b1000000000100000000000000000000000000000000000000000000000000011,
        0b0000000001000000000000000000000000000000000000000000011000000001
    ],
    [
        0b0000000000000000000000000000000000000000000000000000110000000011 ;4
    ],
    [
        0b0000000000000000000000000000000000000000000000000000011000000011,
        0b0000000001000000000000000000000000000000000000000000100000000011,
        0b1000000011000000000000000000000000000000000000000000000000000001,
        0b1000000000100000000000000000000000000000000000000000010000000001
    ],
    [
        0b1000000000000000000000000000000000000000000000000000010000000011,
        0b0000000001000000000000000000000000000000000000000000010000000011,
        0b1000000001000000000000000000000000000000000000000000000000000011,
        0b1000000001000000000000000000000000000000000000000000010000000001
    ],

    [
        0b1000000000000000000000000000000000000000000000000000001000000011,
        0b0000000001000000000000000000000000000000000000000000110000000001,
        0b1000000010000000000000000000000000000000000000000000000000000011,
        0b0000000001100000000000000000000000000000000000000000010000000001
    ],
    [
        0b1000000000000000000000000000000000000000000000000000110000000001,
        0b0000000010000000000000000000000000000000000000000000010000000011,
        0b0000000001100000000000000000000000000000000000000000000000000011,
        0b1000000001000000000000000000000000000000000000000000001000000001
    ]
];

pub const K_CW: [[i8; 5] ; 4] = [
    [gen_cw!(0, 0), gen_cw!(0, 1), gen_cw!(0, 2), gen_cw!(0, 3), gen_cw!(0, 4)],
    [gen_cw!(1, 0), gen_cw!(1, 1), gen_cw!(1, 2), gen_cw!(1, 3), gen_cw!(1, 4)],
    [gen_cw!(2, 0), gen_cw!(2, 1), gen_cw!(2, 2), gen_cw!(2, 3), gen_cw!(2, 4)],
    [gen_cw!(3, 0), gen_cw!(3, 1), gen_cw!(3, 2), gen_cw!(3, 3), gen_cw!(3, 4)],
];
pub const K_CCW: [[i8; 5] ; 4] = [
    [gen_ccw!(0, 0), gen_ccw!(0, 1), gen_ccw!(0, 2), gen_ccw!(0, 3), gen_ccw!(0, 4)],
    [gen_ccw!(1, 0), gen_ccw!(1, 1), gen_ccw!(1, 2), gen_ccw!(1, 3), gen_ccw!(1, 4)],
    [gen_ccw!(2, 0), gen_ccw!(2, 1), gen_ccw!(2, 2), gen_ccw!(2, 3), gen_ccw!(2, 4)],
    [gen_ccw!(3, 0), gen_ccw!(3, 1), gen_ccw!(3, 2), gen_ccw!(3, 3), gen_ccw!(3, 4)],
];
pub const K_180: [[i8; 2] ; 4] = [
    [gen_180!(0, 0), gen_180!(0, 1)],
    [gen_180!(1, 0), gen_180!(1, 1)],
    [gen_180!(2, 0), gen_180!(2, 1)],
    [gen_180!(3, 0), gen_180!(3, 1)],
];
pub const I_K_CW: [[i8; 5] ; 4] = [
    [gen_i_cw!(0, 0), gen_i_cw!(0, 1), gen_i_cw!(0, 2), gen_i_cw!(0, 3), gen_i_cw!(0, 4)],
    [gen_i_cw!(1, 0), gen_i_cw!(1, 1), gen_i_cw!(1, 2), gen_i_cw!(1, 3), gen_i_cw!(1, 4)],
    [gen_i_cw!(2, 0), gen_i_cw!(2, 1), gen_i_cw!(2, 2), gen_i_cw!(2, 3), gen_i_cw!(2, 4)],
    [gen_i_cw!(3, 0), gen_i_cw!(3, 1), gen_i_cw!(3, 2), gen_i_cw!(3, 3), gen_i_cw!(3, 4)],
];
pub const I_K_CCW: [[i8; 5] ; 4] = [
    [gen_i_ccw!(0, 0), gen_i_ccw!(0, 1), gen_i_ccw!(0, 2), gen_i_ccw!(0, 3), gen_i_ccw!(0, 4)],
    [gen_i_ccw!(1, 0), gen_i_ccw!(1, 1), gen_i_ccw!(1, 2), gen_i_ccw!(1, 3), gen_i_ccw!(1, 4)],
    [gen_i_ccw!(2, 0), gen_i_ccw!(2, 1), gen_i_ccw!(2, 2), gen_i_ccw!(2, 3), gen_i_ccw!(2, 4)],
    [gen_i_ccw!(3, 0), gen_i_ccw!(3, 1), gen_i_ccw!(3, 2), gen_i_ccw!(3, 3), gen_i_ccw!(3, 4)],
];
pub const I_K_180: [[i8; 2] ; 4] = [
    [gen_i_180!(0, 0), gen_i_180!(0, 1)],
    [gen_i_180!(1, 0), gen_i_180!(1, 1)],
    [gen_i_180!(2, 0), gen_i_180!(2, 1)],
    [gen_i_180!(3, 0), gen_i_180!(3, 1)],
];
impl BitPiece {
    // 6 bits max for position
    #[inline]
    pub fn new(position: u8, rotation: Direction, color: PieceColor) -> BitPiece {

        // print!("{} {} {} ", position, rotation as u8, color as u8);
        // println!("{:b} {:b} {:b}", color as u16, position as u16, rotation as u16,  );
        BitPiece(position as usize, rotation as usize, color as usize)
    }
    #[inline]
    #[allow(arithmetic_overflow)]
    pub fn bit_repr(&self) -> u64 {
        let pos = self.0;
        let minos = MINOS[
            self.2
        ][
            self.1
        ];
        minos.rotate_left(pos as u32) 
    }
    #[allow(arithmetic_overflow)]
    #[inline]
    pub fn wall_overlap(&self) -> bool {
        let pos = self.0 as u32;
        let bound_data = POSITION_BOUNDS[
            self.2
        ][
            self.1
        ];
        let temp1 = (pos * 26215) >> 18 ;
        let y = (pos * 26215 >> 18) as u16;
        let x = pos as u16 - 10 * y;
        !(x <= (bound_data & 0b1111) && x >= (bound_data >> 4 & 0b1111) && y >= (bound_data >> 10 & 0b11))
    }
    #[allow(arithmetic_overflow)]
    pub fn in_bounds(&self) -> bool {
        let pos = self.0 as u32;
        let bound_data = POSITION_BOUNDS[
            self.2
        ][
            self.1
        ];
        let temp1 = (pos * 26215) >> 18 ;
        let y = (pos * 26215 >> 18) as u16;
        let x = pos as u16 - 10 * y;
        x <= (bound_data & 0b1111) && x >= (bound_data >> 4 & 0b1111) && y <= (bound_data >> 8 & 0b11) && y >= (bound_data >> 10 & 0b11) 
    }
    pub fn to_tet_piece(&self) -> TetPiece {
        let pos = self.0 as u32;
        let rot = self.1 as u8;
        let color = self.2 as u8;
        let temp1 = (pos * 26215) >> 18 ;
        let y = (pos * 26215 >> 18) as u16;
        let x = pos as u16 - 10 * y;
        let vec = Vec2((x as i8).into(), (y as i8).into());
        TetPiece::new(PieceColor::from(color), Direction::from(rot), vec)
    }

}
impl Vec2 {
    pub fn to_u8(&self) -> u8 {
        let (x, y) = (self.0, self.1);
        (y * 10 + x).try_into().unwrap()
    }
}